# -----------------------------------------------------------------------------
# Public Configuration
#
# These variables are prefixed with NEXT_PUBLIC_ and are exposed to the client-side (the browser).
# They should only contain non-sensitive, public information.
# -----------------------------------------------------------------------------

# The public-facing root domain for the short link service.
# This is used by the frontend UI (e.g., in `link-card.tsx`) to construct the full, shareable short URL
# that you can copy and paste. For example, it combines this URL with a slug to create "https://duan.io/xyz".
# This value is intentionally public.
NEXT_PUBLIC_API_URL=https://duan.io


# -----------------------------------------------------------------------------
# Server-Side Private Configuration
#
# These variables are ONLY available on the server-side (in the Next.js API routes).
# They are NOT exposed to the browser and are used for secure communication.
# -----------------------------------------------------------------------------

# The URL of your main backend service.
# This is used by the Next.js API routes (the BFF - Backend-For-Frontend) to know where to
# forward the actual API requests (e.g., for updating or deleting a link).
# Our BFF acts as a secure proxy, calling this URL and adding the secret BACKEND_API_TOKEN.
BACKEND_API_URL=https://duan.io

# A secret token used by the Next.js Server Actions to authenticate with your main backend service.
# This token MUST be kept secret and should never be exposed to the frontend.
BACKEND_API_TOKEN=your-cloudflare-backend-api-token

# A token used to secure the dashboard itself. This is used in a cookie to verify
# that the user is logged into the management dashboard.
DASHBOARD_TOKEN=your-dashboard-token


# --- Why are NEXT_PUBLIC_API_URL and BACKEND_API_URL separate variables if they can have the same value? ---
#
# This is a key architectural decision for security and flexibility, based on industry best practices.
#
# 1.  **Separation of Concerns**: Even if the value is the same, their *roles* are completely different.
#     - `NEXT_PUBLIC_API_URL` is for the **public-facing URL** used in the browser.
#     - `BACKEND_API_URL` is for the **secure API endpoint** used by the server.
#     This separation makes the code's intent clear and prevents accidental misuse of variables.
#
# 2.  **Architectural Flexibility**: This design allows your infrastructure to evolve without code changes.
#     For example, you might later decide to move your backend API to a dedicated subdomain like `https://api.duan.io`.
#     With this setup, you would only need to update the `BACKEND_API_URL` value in your environment.
#     No code changes would be necessary, making your application robust and maintainable.
#
# 3.  **Security by Design**: It reinforces the security model. It's clear that any communication
#     with `BACKEND_API_URL` happens on the server and can be secured with secret tokens like `API_TOKEN`.
#     This prevents a developer from accidentally trying to call a secure endpoint directly from the client-side.
